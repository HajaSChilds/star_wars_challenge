{"version":3,"sources":["components/StarTimelineContent.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","paper","padding","color","backgroundColor","opacity","fontSize","secondaryTail","palette","secondary","main","StarTimelineContent","props","classes","Paper","elevation","className","title","date","description","root","width","marginTop","spacing","App","useState","events","data","setData","loading","setStatus","useEffect","controller","AbortController","options","method","signal","setTimeout","abort","fetch","then","res","json","results","catch","error","console","log","href","LinearProgress","Timeline","align","map","event","key","release_date","opening_crawl","content","TimelineItem","TimelineSeparator","TimelineDot","TimelineConnector","TimelineContent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"mSAiBMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,MAAO,CACLC,QAAS,WACTC,MAAO,QACPC,gBAAiB,QACjBC,QAAQ,MACRC,SAAU,SAGZC,cAAe,CACbH,gBAAiBJ,EAAMQ,QAAQC,UAAUC,UAI9B,SAASC,EAAoBC,GAExC,IAAMC,EAAUf,IAEpB,OACE,kBAACgB,EAAA,EAAD,CAAOC,UAAW,EAAGC,UAAWH,EAAQZ,OACtC,4BAAKW,EAAMK,OACX,4BAAKL,EAAMM,MACX,2BAAIN,EAAMO,c,4DCpBRrB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCoB,KAAM,CACJC,MAAO,MACP,YAAa,CACXC,UAAWtB,EAAMuB,QAAQ,SA+FhBC,MAzFf,WAAe,MAGWC,mBAAS,CAAEC,OAAQ,KAH9B,mBAGNC,EAHM,KAGAC,EAHA,OAIgBH,mBAAS,CAACI,SAAS,IAJnC,mBAINA,EAJM,KAIGC,EAJH,KAKPjB,EAAUf,IA4DhB,OA1DAiC,qBAAU,WAER,IAAMC,EAAa,IAAIC,gBACjBC,EAAU,CACdC,OAAQ,MACRC,OAAQJ,EAAWI,QAGHC,YAAW,kBAAML,EAAWM,UAAS,KAEvDC,MA/BU,+BA+BGL,GACVM,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAb,GACJC,EAAQD,EAAKgB,SACbb,GAAU,MAEXc,OAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,EAAO,qDACtC,IASUC,QAAQC,IAQRD,QAAQC,IAyBnB,yBAAK/B,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,SACb,yCACA,uBAAGgC,KAAK,sDACN,wDAGJ,yBAAKhC,UAAU,sBACZa,EACC,yBAAKb,UAAWH,EAAQO,MACtB,kBAAC6B,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,OAGF,kBAACC,EAAA,EAAD,CAAUC,MAAM,aAnCjBxB,EAAKyB,KAAI,SAACC,GACf,OAAO,kBAAC1C,EAAD,CAAqB2C,IAAKD,EAAMpC,MAAOA,MAAOoC,EAAMpC,MAAOC,KAAMmC,EAAME,aAAcpC,YAAakC,EAAMG,mBAO/FJ,KAAI,SAACK,GACnB,OAAO,kBAACC,EAAA,EAAD,CAAcJ,IAAKG,EAAQH,KAC5B,kBAACK,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,OAEF,kBAACC,EAAA,EAAD,KAAkBL,YC7EZM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdjC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMiC,c","file":"static/js/main.761602a1.chunk.js","sourcesContent":["import React from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\n\n\n//TODO: Fetch data from API - pass down as props to events components\n\n//TODO: Create object array of events to pass down as props\n\n//TODO: Create custom layout for Timeline - done\n\n//TODO: Map event array to Timeline - done\n\n//TODO: Map objects to event - done\n\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: '6px 16px',\n    color: 'white',\n    backgroundColor: 'black',\n    opacity:'0.7',\n    fontSize: '0.5em',\n    },\n  \n  secondaryTail: {\n    backgroundColor: theme.palette.secondary.main,\n  },\n}));\n\nexport default function StarTimelineContent(props){\n\n    const classes = useStyles();    \n\nreturn (\n  <Paper elevation={3} className={classes.paper}>\n    <h1>{props.title}</h1>\n    <h3>{props.date}</h3>\n    <p>{props.description}</p>\n  </Paper>\n);\n\n}","import React, { useState, useEffect } from 'react';\n\nimport './App.scss';\nimport StarTimelineContent from './components/StarTimelineContent';\nimport Timeline from '@material-ui/lab/Timeline';\nimport TimelineItem from '@material-ui/lab/TimelineItem';\nimport TimelineSeparator from '@material-ui/lab/TimelineSeparator';\nimport TimelineConnector from '@material-ui/lab/TimelineConnector';\nimport TimelineContent from '@material-ui/lab/TimelineContent';\nimport TimelineDot from '@material-ui/lab/TimelineDot';\nimport { makeStyles } from '@material-ui/core/styles'\nimport { LinearProgress } from '@material-ui/core';\n\n\n/* Star Wars API */\nconst SWAPI = \"https://swapi.dev/api/films/\"; \n\n\n/* Material UI Loading Bar Theme */\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '90%',\n    '& > * + *': {\n      marginTop: theme.spacing(2),\n    },\n  },\n}));\n\n\nfunction App() {\n\n  /*Hooks */\n  const [data, setData] = useState({ events: [] });        // Sets Star Wars Data\n  const [loading, setStatus] = useState({loading: true});  // Sets Loading Navigation\n  const classes = useStyles();                             // Sets Styles for Loading Navigation\n  \n  useEffect(() => {\n\n    const controller = new AbortController();\n    const options = {\n      method: 'GET',\n      signal: controller.signal,\n    } \n\n    const timeoutId = setTimeout(() => controller.abort(), 10000); //Set timeout for fetch\n\n    fetch(SWAPI, options)\n      .then(res => res.json()) \n      .then(data => { \n        setData(data.results); \n        setStatus(false); // Sets loading status to false when data loads\n      })\n      .catch(error => console.error(error, 'Timeout exceeded, unable to fetch movie data'))\n  }, []) // useEffect only runs once with empty bracket second argument\n\n  const events2 = [\n    {\n      release_date: '1977-05-25',\n      opening_crawl:\n        'Sed leo elit, pellentesque sit amet congue quis, ornare nec lorem.',\n      title: 'Cairo, Egypt',\n      buttonText: 'Click Me',\n      onClick: console.log,\n    },\n    {\n      release_date: '1977-05-25',\n      opening_crawl:\n        'Sed leo elit, pellentesque sit amet congue quis, ornare nec lorem.',\n      title: 'Venice, Italy',\n      buttonText: 'Click Me',\n      onClick: console.log,\n    },\n  ]; //sample data\n\n  function showMovies() {\n    return data.map((event) => {\n      return <StarTimelineContent key={event.title} title={event.title} date={event.release_date} description={event.opening_crawl} />\n    })\n\n  }\n\n  function mapTimeline() {\n    const movieMap = showMovies();\n      return movieMap.map((content) => {\n        return <TimelineItem key={content.key} >\n              <TimelineSeparator>\n                <TimelineDot />\n                <TimelineConnector />\n              </TimelineSeparator>\n              <TimelineContent>{content}</TimelineContent>\n            </TimelineItem>\n      })\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"title\">\n          <h1>STAR WARS</h1>\n          <a href=\"https://github.com/HajaSChilds/star_wars_challenge\">\n            <h2>Movie Release Timeline</h2>\n          </a>\n        </div>\n        <div className=\"timeline-container\">\n          {loading ? (\n            <div className={classes.root}>\n              <LinearProgress />\n              <LinearProgress />\n            </div>\n          ) : (\n            <Timeline align=\"alternate\">{mapTimeline()}</Timeline>\n          )}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}